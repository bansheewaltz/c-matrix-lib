#include "s21_matrix.h"
#include "s21_matrix_supplementary.h"
#include "test_utils.h"


#suite is_diagonal
#test generic
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      m.matrix[i][j] = get_rand_double(DBL_MIN, DBL_MAX);
    }
  }

  bool exp = rows == cols;
  if (exp == false)
    goto out_loop;
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      if (i == j)
        continue;
      if (m.matrix[i][j] != 0){
        exp = false;
        goto out_loop;
      }
    }
  }
  out_loop:
  bool res = s21_is_diagonal(&m);

  ck_assert_int_eq(exp, res);

  s21_remove_matrix(&m);


#test generic_diagonal
  const int side = rand() % 100 + 1;
  const int rows = side;
  const int cols = side;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);
  for (int i = 0; i < side; i++) {
    for (int j = 0; j < side; j++) {
      if (i == j)
        m.matrix[i][j] = get_rand_double(DBL_MIN, DBL_MAX);
      else
        m.matrix[i][j] = 0;
    }
  }

  bool exp = true;
  bool res = s21_is_diagonal(&m);

  ck_assert_int_eq(exp, res);

  s21_remove_matrix(&m);


#test square_empty
  const int rows = 2;
  const int cols = 2;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);

  bool exp = true;
  bool res = s21_is_diagonal(&m);

  ck_assert_int_eq(exp, res);

  s21_remove_matrix(&m);


#test not_square
  const int rows = 2;
  const int cols = 3;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);

  bool exp = false;
  bool res = s21_is_diagonal(&m);

  ck_assert_int_eq(exp, res);

  s21_remove_matrix(&m);


#test square_diag
  const int side = 3;
  const int rows = side;
  const int cols = side;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);
  cleanup_matrix_rows_arrays(&m);
  m.matrix[0] = (double[]){1, 0, 0};
  m.matrix[1] = (double[]){0, 2, 0};
  m.matrix[2] = (double[]){0, 0, 3};
  
  bool exp = true;
  bool res = s21_is_diagonal(&m);

  ck_assert_int_eq(exp, res);

  free(m.matrix);


#test square_not_diagonal
  const int side = 3;
  const int rows = side;
  const int cols = side;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);
  cleanup_matrix_rows_arrays(&m);
  m.matrix[0] = (double[]){1, 0, 0};
  m.matrix[1] = (double[]){0, 2, 0};
  m.matrix[2] = (double[]){0, 3, 3};
  
  bool exp = false;
  bool res = s21_is_diagonal(&m);

  ck_assert_int_eq(exp, res);

  free(m.matrix);
