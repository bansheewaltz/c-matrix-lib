#include "s21_matrix.h"
#include "s21_matrix_supplementary.h"
#include "test_utils.h"


#suite matrix_size_s
#test generic
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);

  int exp = rows * cols;
  int res;
  rc = s21_matrix_size_s(&m, &res);

  ck_assert_int_eq(rc, RC_OK);
  ck_assert_int_eq(exp, res);

  s21_remove_matrix(&m);


#test specific
  const int rows = 5;
  const int cols = 7;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);

  int exp = 35;
  int res;
  rc = s21_matrix_size_s(&m, &res);

  ck_assert_int_eq(rc, RC_OK);
  ck_assert_int_eq(exp, res);

  s21_remove_matrix(&m);


#test null_pointer_matrix
  int rc = RC_OK;
  
  int res;
  rc = s21_matrix_size_s(NULL, &res);

  ck_assert_int_eq(rc, RC_NULL_POINTER_INPUT);


#test null_pointer_result
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);
  
  rc = s21_matrix_size_s(&m, NULL);

  ck_assert_int_eq(rc, RC_NULL_POINTER_INPUT);

  s21_remove_matrix(&m);
