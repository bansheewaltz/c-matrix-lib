#include "s21_matrix.h"
#include "s21_matrix_supplementary.h"
#include "test_utils.h"


#suite is_square_s
#test generic
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);

  int exp = rows == cols;
  bool res;
  rc = s21_is_square_s(&m, &res);

  ck_assert_int_eq(rc, RC_OK);
  ck_assert_int_eq(exp, res);

  s21_remove_matrix(&m);


#test specific_true
  const int rows = 4;
  const int cols = 4;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);

  int exp = true;
  bool res;
  rc = s21_is_square_s(&m, &res);

  ck_assert_int_eq(rc, RC_OK);
  ck_assert_int_eq(exp, res);

  s21_remove_matrix(&m);


#test specific_false
  const int rows = 4;
  const int cols = 5;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);

  int exp = false;
  bool res;
  rc = s21_is_square_s(&m, &res);

  ck_assert_int_eq(rc, RC_OK);
  ck_assert_int_eq(exp, res);

  s21_remove_matrix(&m);


#test null_pointer_matrix
  int rc = RC_OK;
  
  bool res;
  rc = s21_is_square_s(NULL, &res);

  ck_assert_int_eq(rc, RC_NULL_POINTER_INPUT);


#test null_pointer_result
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m;
  rc = s21_create_matrix(rows, cols, &m);
  ck_assert_int_eq(rc, RC_OK);
  
  rc = s21_is_square_s(&m, NULL);

  ck_assert_int_eq(rc, RC_NULL_POINTER_INPUT);

  s21_remove_matrix(&m);
