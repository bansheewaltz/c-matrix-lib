#include "s21_matrix.h"
#include "test_utils.h"
#include "s21_comparison_defines.h"


#suite mult_matrix
#test sample
  int rc = RC_OK;
  const int rows1 = 3;
  const int cols1 = 2;
  matrix_t m1;
  rc = s21_create_matrix(rows1, cols1, &m1);
  ck_assert_int_eq(rc, RC_OK);
  cleanup_matrix_rows_arrays(&m1);
  m1.matrix[0] = (double[]){1, 4};
  m1.matrix[1] = (double[]){2, 5};
  m1.matrix[2] = (double[]){3, 6};
  const int rows2 = 2;
  const int cols2 = 3;
  matrix_t m2;
  rc = s21_create_matrix(rows2, cols2, &m2);
  ck_assert_int_eq(rc, RC_OK);
  cleanup_matrix_rows_arrays(&m2);
  m2.matrix[0] = (double[]){1, -1, 1};
  m2.matrix[1] = (double[]){2, 3, 4};
  matrix_t exp;
  rc = s21_create_matrix(rows1, cols2, &exp);
  ck_assert_int_eq(rc, RC_OK);
  cleanup_matrix_rows_arrays(&exp);
  exp.matrix[0] = (double[]){9, 11, 17};
  exp.matrix[1] = (double[]){12, 13, 22};
  exp.matrix[2] = (double[]){15, 15, 27};

  matrix_t res;
  rc = s21_mult_matrix(&m1, &m2, &res);
  
  ck_assert_int_eq(rc, RC_OK);
  ck_assert_int_eq(s21_eq_matrix(&exp, &res), SUCCESS);

  free(m1.matrix);
  free(m2.matrix);
  free(exp.matrix);
  s21_remove_matrix(&res);


#test generic
  int rc = RC_OK;
  const int rows1 = rand() % 100 + 1;
  const int cols1 = rand() % 100 + 1;
  matrix_t m1;
  rc = s21_create_matrix(rows1, cols1, &m1);
  ck_assert_int_eq(rc, RC_OK);
  fill_matrix_with_rand(&m1);
  const int rows2 = rand() % 100 + 1;
  const int cols2 = rand() % 100 + 1;
  matrix_t m2;
  rc = s21_create_matrix(rows2, cols2, &m2);
  ck_assert_int_eq(rc, RC_OK);
  fill_matrix_with_rand(&m2);
  
  matrix_t exp;
  ck_assert_int_eq(s21_create_matrix(rows1, cols2, &exp), RC_OK);
  for (int i = 0; i < m1.rows; i++) {
    for (int j = 0; j < m2.columns; j++) {
      double sum = 0;
      for (int k = 0; k < m2.rows; k++) {
        sum += m1.matrix[i][k] * m2.matrix[k][j];
      }
      exp.matrix[i][j] = sum;
    }
  }
  
  matrix_t res;
  rc = s21_mult_matrix(&m1, &m2, &res);
  if (rc == RC_OK)
    ck_assert_int_eq(s21_eq_matrix(&exp, &res), SUCCESS);
  else
    ck_assert_int_eq(rc, RC_CALCULATIONS_CANNOT_BE_PERFORMED);
  
  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);
  s21_remove_matrix(&exp);
  if (rc == RC_OK)
    s21_remove_matrix(&res);


#test different_matrix_sizes
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m1;
  rc = s21_create_matrix(rows, cols, &m1);
  ck_assert_int_eq(rc, RC_OK);
  matrix_t m2;
  rc = s21_create_matrix(rows + 1, cols, &m2); // rows + 1
  ck_assert_int_eq(rc, RC_OK);
  
  matrix_t res;
  rc = s21_mult_matrix(&m1, &m2, &res);
  
  ck_assert_int_eq(rc, RC_CALCULATIONS_CANNOT_BE_PERFORMED);
  
  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);


#test malloc_failed
  const int side = 13;
  const int rows = side;
  const int cols = side;
  int rc = RC_OK;
  matrix_t m1;
  rc = s21_create_matrix(rows, cols, &m1);
  ck_assert_int_eq(rc, RC_OK);
  matrix_t m2;
  rc = s21_create_matrix(rows, cols, &m2);
  ck_assert_int_eq(rc, RC_OK);
  
  m1.matrix[0][0] = 5; // special value for malloc failure
  m2.matrix[0][0] = 7; // special value for malloc failure
  matrix_t res;
  rc = s21_mult_matrix(&m1, &m2, &res);
  
  ck_assert_int_eq(rc, RC_MEMORY_ALLOCATION_FAILED);
  
  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);


#test specific_size
const int side = 13;
  const int rows = side;
  const int cols = side;
  int rc = RC_OK;
  matrix_t m1;
  rc = s21_create_matrix(rows, cols, &m1);
  ck_assert_int_eq(rc, RC_OK);
  matrix_t m2;
  rc = s21_create_matrix(rows, cols, &m2);
  ck_assert_int_eq(rc, RC_OK);
  
  m1.matrix[0][0] = 5; // special value for branch coverage
  matrix_t res;
  rc = s21_mult_matrix(&m1, &m2, &res);
  
  ck_assert_int_eq(rc, RC_OK);
  
  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);
  s21_remove_matrix(&res);


#test nullpointer_second
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m1;
  rc = s21_create_matrix(rows, cols, &m1);
  ck_assert_int_eq(rc, RC_OK);
  
  matrix_t res;
  rc = s21_mult_matrix(&m1, NULL, &res);
  
  ck_assert_int_eq(rc, RC_NULL_POINTER_INPUT);
  
  s21_remove_matrix(&m1);


#test nullpointer_first
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m2;
  rc = s21_create_matrix(rows, cols, &m2);
  ck_assert_int_eq(rc, RC_OK);
  
  matrix_t res;
  rc = s21_mult_matrix(NULL, &m2, &res);
  
  ck_assert_int_eq(rc, RC_NULL_POINTER_INPUT);
  
  s21_remove_matrix(&m2);


#test nullpointer_res
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m1;
  rc = s21_create_matrix(rows, cols, &m1);
  ck_assert_int_eq(rc, RC_OK);
  matrix_t m2;
  rc = s21_create_matrix(rows, cols, &m2);
  ck_assert_int_eq(rc, RC_OK);
  
  rc = s21_mult_matrix(&m1, &m2, NULL);
  
  ck_assert_int_eq(rc, RC_NULL_POINTER_INPUT);
  
  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);


#test nullpointer_matrix_array_first
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m1;
  rc = s21_create_matrix(rows, cols, &m1);
  ck_assert_int_eq(rc, RC_OK);
  matrix_t m2;
  rc = s21_create_matrix(rows, cols, &m2);
  ck_assert_int_eq(rc, RC_OK);
  
  cleanup_matrix_2d_array(&m1);
  matrix_t res;
  rc = s21_mult_matrix(&m1, &m2, &res);
  
  ck_assert_int_eq(rc, RC_NULL_POINTER_INPUT);
  
  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);


#test nullpointer_matrix_array_second
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m1;
  rc = s21_create_matrix(rows, cols, &m1);
  ck_assert_int_eq(rc, RC_OK);
  matrix_t m2;
  rc = s21_create_matrix(rows, cols, &m2);
  ck_assert_int_eq(rc, RC_OK);
  
  cleanup_matrix_2d_array(&m2);
  matrix_t res;
  rc = s21_mult_matrix(&m1, &m2, &res);
  
  ck_assert_int_eq(rc, RC_NULL_POINTER_INPUT);
  
  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);


#test incorrect_matrix_dimensions
  const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  int rc = RC_OK;
  matrix_t m1;
  rc = s21_create_matrix(rows, cols, &m1);
  ck_assert_int_eq(rc, RC_OK);
  matrix_t m2;
  rc = s21_create_matrix(rows, cols, &m2);
  ck_assert_int_eq(rc, RC_OK);
  
  m1.rows = -1;
  m2.columns = -1;
  matrix_t res;
  rc = s21_mult_matrix(&m1, &m2, &res);
  
  ck_assert_int_eq(rc, RC_INCORRECT_MATRIX_PARAMETERS);
  
  m1.rows = rows;
  m2.columns = cols;
  s21_remove_matrix(&m1);
  s21_remove_matrix(&m2);
