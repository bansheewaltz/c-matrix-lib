CONFIG := unit_testing
### some variables and targets are stored in a shared makefile
include Makefile.common
### Tools specification
COV ?= gcovr
### Paths
SRC_B := $(BLD)/src
T_INC := $(TST)/headers
COV_REP := $(REPORTS)/coverage_report
COV_INF := $(BLD)/coverage_info
### Filenames specification
TST_REPORT_R := $(REPORTS)/tests_report_raw.txt
COV_REPORT := index.html
### Project files
## case when each function is in a separate file
# T_SRCS := $(SRCS:$(SRC)/s21_%.c=$(SRC_B)/%_test.c)
# T_EXES := $(SRCS:$(SRC)/s21_%.c=$(BIN)/%_test)
## case of generic function grouping in files
T_SRCS := $(CHKS:$(CHK)/%.check=$(SRC_B)/%.c)
T_EXES := $(CHKS:$(CHK)/%.check=$(BIN)/%)
### Build parameters
LDLIBS  += $(shell pkg-config --libs-only-l $(LIBS))
LDFLAGS += $(shell pkg-config --libs-only-L $(LIBS))
DBGFLAGS = -g
COVFLAG := --coverage
### Summary
CFLAGS_TEST    := $(OFLAG) $(DBGFLAGS) $(STDFLAG) -I$(INC) -I$(HDR) -I$(T_INC) $(DEFINES) $(shell pkg-config --cflags check)# $(WFLAGS)
CFLAGS_SOURCSE := $(OFLAG) $(DBGFLAGS) $(STDFLAG) -I$(INC) -I$(HDR) $(DEFINES_TEST) $(COVFLAG) $(WFLAGS)
CK_FORK = no
export TST CK_FORK


.PHONY: test
test:
	$(info )
	$(info *** silently compiling code covered build version for unit testing ***)
	$(info *** compiler parameters for tests  .o files: $(CFLAGS_TEST))
	$(info *** compiler parameters for source .o files: $(CFLAGS_SOURCSE))
	$(info *** linker parameters: $(COVFLAG) $(LDFLAGS) $(LDLIBS))
	$(info )
	$(MAKE) -f Makefile.unit_testing $(T_EXES)
	$(MAKE) -f Makefile.unit_testing move_coverage_info

# $(BIN)/%_test: $(OBJ)/s21_%.o $(OBJ)/%_test.o | $(COV_INF) $(REPORTS)
# 	$(dir_guard)
# 	$(CC) $(DBGFLAGS) $(COVFLAG) $^ $(LDFLAGS) $(LDLIBS) -o $@
# 	-mv $(OBJ)/s21_$*.gcno $(COV_INF) 2> /dev/null
# 	# -./$@ | tee -a $(TST_REPORT_R) > >(bash testing/scripts/format_toutput.sh)
# 	-./$@ | tee -a $(TST_REPORT_R)
# 	mv $(OBJ)/s21_$*.gcda $(COV_INF)

move_coverage_info:
	-mv $(OBJ)/*.gcno $(COV_INF) 2> /dev/null
	-mv $(OBJ)/*.gcda $(COV_INF) 2> /dev/null

$(BIN)/%_test: $(BLD)/$(LIBNAME).a $(OBJ)/%_test.o | $(COV_INF) $(REPORTS)
	$(dir_guard)
	$(CC) $(DBGFLAGS) $(COVFLAG) $^ $(LDFLAGS) $(LDLIBS) -o $@
	# -./$@ | tee -a $(TST_REPORT_R) > >(bash test/scripts/format_toutput.sh)
ifdef VALGRIND
	-(echo && valgrind --leak-check=full $@) 2> >(bash $(SCRIPTS_DIR)/format_memcheck.sh)
else
	-./$@ | tee -a $(TST_REPORT_R)
endif

$(BLD)/$(LIBNAME).a: $(OBJS)
	ar -rsc $@ $^

$(OBJ)/s21_%.o: CFLAGS = $(CFLAGS_SOURCSE)
$(OBJ)/s21_%.o: $(SRC)/s21_%.c | $(OBJ)
	$(CC) -c $(CFLAGS) $< -o $@

$(OBJ)/%_test.o: CFLAGS = $(CFLAGS_TEST)
$(OBJ)/%_test.o: $(SRC_B)/%_test.c | $(OBJ)
	$(CC) -c $(CFLAGS) $< -o $@

$(SRC_B)/%_test.c: $(CHK)/%_test.check
	$(dir_guard)
	checkmk $< > $@
	$(format_the_file)

# directories creation
$(OBJ):
	@$(MK) $@
$(COV_INF):
	@$(MK) $@
$(REPORTS):
	@$(MK) $@


.PHONY: gcov_report
gcov_report: $(T_EXES)
ifeq (, $(shell which gcovr))
	$(error "gcovr" tool should be installed)
endif
	@$(MK) $(COV_REP)
	-gcovr --txt --fail-under-line 80 $(COV_INF)
	 gcovr --html-details --html-self-contained -o $(COV_REP)/$(COV_REPORT) $(COV_INF)
ifeq ($(OS), macOS)
	open $(COV_REP)/$(COV_REPORT)
endif

.PHONY: show
show: gcov_report
ifeq ($(OS), macOS)
	open $(COV_REP)/$(COV_REPORT)
endif
