CONFIG := unit_testing
### some variables and targets are stored in a shared makefile
include Makefile.common
### Tools specification
COV ?= gcovr
### Project paths
BLD_T := $(BLD)/test
SRC_T := $(BLD_T)/src
OBJ_T := $(BLD_T)/obj
BIN_T := $(BLD_T)/bin
INC_T := $(TST)/headers
COV_REP := $(REPORTS)/coverage_report
COV_INF := $(BLD)/coverage_info
### Filenames specification
TST_REPORT_R := $(REPORTS)/tests_report_raw.txt
COV_REPORT   := $(COV_REP)/index.html
### Project files
## case when each function is in a separate file
# SRCS_T := $(SRCS:$(SRC)/s21_%.c=$(SRC_T)/%_test.c)
# EXES_T := $(SRCS:$(SRC)/s21_%.c=$(BIN_T)/%_test)
## case of generic function grouping in files
SRCS_T := $(CHKS:$(CHK)/%.check=$(SRC_T)/%.c)
EXES_T := $(CHKS:$(CHK)/%.check=$(BIN_T)/%)
### Build parameters
LDLIBS     := $(shell pkg-config --libs-only-l       $(LIBS))
LDFLAGS    := $(shell pkg-config --libs-only-L       $(LIBS))
LDOPTIONS  := $(shell pkg-config --libs-only-other   $(LIBS)) 
LIBINCS    := $(shell pkg-config --cflags-only-I     $(LIBS)) 
LIBOPTIONS := $(shell pkg-config --cflags-only-other $(LIBS)) 
COVFLAG  := --coverage
DBGFLAGS := -g
OFLAG    := -O0
MEMFLAGS := --tool=memcheck \
            --leak-check=full \
            --show-leak-kinds=all \
            --track-origins=yes \
            --trace-children=yes \
						--show-error-list=yes
### Summary
CFLAGS_TEST    := $(OFLAG) $(DBGFLAGS) $(STDFLAG) $(LIBOPTIONS) -I$(INC) -I$(HDR) -I$(INC_T) $(LIBINCS) $(WFLAGS)
CFLAGS_SOURCSE := $(OFLAG) $(DBGFLAGS) $(STDFLAG) $(COVFLAG) $(DEFINES_T) -I$(INC) -I$(HDR) $(WFLAGS)
### Variables
CK_FORK := no
DEFINES_T = -DTESTING
export TST CK_FORK

.PHONY: test
test:
	$(info )
	$(info *** silently compiling code covered build version for unit testing ***)
	$(info *** compiler parameters for tests  .o files: $(CFLAGS_TEST))
	$(info *** compiler parameters for source .o files: $(CFLAGS_SOURCSE))
	$(info *** linker parameters: $(COVFLAG) $(LDFLAGS) $(LDLIBS))
	$(info )
	$(MAKE) -f Makefile.unit_testing $(EXES_T)
	$(MAKE) -f Makefile.unit_testing move_coverage_info

# $(BIN_T)/%_test: $(OBJ)/s21_%.o $(OBJ)/%_test.o | $(COV_INF) $(REPORTS)
# 	$(dir_guard)
# 	$(CC) $(DBGFLAGS) $(COVFLAG) $^ $(LDFLAGS) $(LDLIBS) -o $@
# 	-mv $(OBJ)/s21_$*.gcno $(COV_INF) 2> /dev/null
# 	# -./$@ | tee -a $(TST_REPORT_R) > >(bash $(SCRIPTS_DIR)/format_toutput.sh)
# 	-./$@ | tee -a $(TST_REPORT_R)
# 	mv $(OBJ)/s21_$*.gcda $(COV_INF)

move_coverage_info:
	-mv $(OBJ)/*.gcno $(COV_INF) 2> /dev/null
	-mv $(OBJ)/*.gcda $(COV_INF) 2> /dev/null

$(BIN_T)/%: $(OBJ_T)/%.o $(BLD)/$(LIBNAME).a | $(BIN_T) $(COV_INF) $(REPORTS)
	$(CC) $(DBGFLAGS) $(COVFLAG) $(LDOPTIONS) $(LDFLAGS) $^ $(LDLIBS) -o $@
ifdef VALGRIND
	-(echo && valgrind $(MEMFLAGS) $@) 2> >(bash $(SCRIPTS_DIR)/format_memcheck.sh)
else
	-./$@ | tee -a $(TST_REPORT_R)
endif

$(BLD)/$(LIBNAME).a: $(OBJS)
	ar -rsc $@ $^

$(OBJ)/s21_%.o: CFLAGS = $(CFLAGS_SOURCSE)
$(OBJ)/s21_%.o: $(SRC)/s21_%.c | $(OBJ)
	$(CC) -c $(CFLAGS) $< -o $@

$(OBJ_T)/%.o: CFLAGS = $(CFLAGS_TEST)
$(OBJ_T)/%.o: $(SRC_T)/%.c | $(OBJ_T)
	$(CC) -c $(CFLAGS) $< -o $@

$(SRC_T)/%.c: $(CHK)/%.check | $(SRC_T)
	checkmk $< > $@
	$(format_the_file)

### Directories creation
$(OBJ):
	@$(MK) $@
$(SRC_T):
	@$(MK) $@
$(OBJ_T):
	@$(MK) $@
$(BIN_T):
	@$(MK) $@
$(COV_INF):
	@$(MK) $@
$(REPORTS):
	@$(MK) $@


.PHONY: gcov_report
gcov_report: $(EXES_T)
ifndef GCOVR
	$(error "gcovr" tool should be installed)
endif
	@$(MK) $(COV_REP)
	-gcovr --txt --branches --fail-under-branch 80 $(COV_INF)
	 gcovr --html-details --html-self-contained -o $(COV_REPORT) $(COV_INF)
ifeq ($(OS), macOS)
	open $(COV_REPORT)
endif

.PHONY: show
show:
ifdef MACOS
	open $(COV_REP)/$(COV_REPORT)
endif
